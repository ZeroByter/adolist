rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner
    function isOwner() {
      return resource.data.ownerId == request.auth.uid;
    }

    // Helper function to check if the user is a collaborator (shared access)
    function isSharedWithUser() {
      return request.auth.uid in resource.data.shares;
    }

    // Helper function to enforce that only required fields are passed
    function enforceRequestFields(requiredFields, optionalFields) {
      return
        request.resource.data.keys().hasAll(requiredFields) &&
        request.resource.data.keys().hasOnly(requiredFields.concat(optionalFields))
    }
    
    // Helper function to check if a field is modified
    function isFieldModified(param) {
    	return param in request.resource.data.diff(resource.data).affectedKeys()
    }

    // Helper function to prevent ownerId modification
    function isOwnerIdUnmodified() {
      return !isFieldModified("ownerId");
    }

    // Helper function to ensure only the owner can modify the 'shares' field
    function isSharesModifiedByOwner() {
      return !isFieldModified("shares") || isOwner();
    }

    // Rules for "boards" collection
    match /boards/{boardId} {
      function enforceBoardFields() {
        return enforceRequestFields(['ownerId', 'name', 'listOrder', 'timeCreated', 'timeUpdated', 'shares', 'tasks'], [])
      }

      // Allow read if the user is authenticated and is either the owner or a collaborator
      allow read: if isAuthenticated() && (isOwner() || isSharedWithUser());

      // Allow update if:
      // - The user is authenticated and is either the owner or a collaborator
      // - The 'ownerId' field is not being modified
      // - The 'shares' field is only modified by the owner
      // - All other fields can be modified by any authenticated user (other than ownerId and shares)
      allow update:
        if enforceBoardFields() &&
           isAuthenticated() && 
           (isOwner() || isSharedWithUser()) &&
           isOwnerIdUnmodified() &&
           isSharesModifiedByOwner();

      // Allow create if the user is authenticated and is the owner
      allow create:
        if enforceBoardFields() &&
           isAuthenticated() &&
           request.resource.data.ownerId == request.auth.uid;

      // Allow delete if the user is authenticated and is the owner
      allow delete:
        if isAuthenticated() && isOwner();
    }

    // Rules for "users" collection
    match /users/{userId} {
      function enforceUserFields() {
        return enforceRequestFields(['displayName', 'searchableName', 'timeCreated'], [])
      }

      // Allow creating a user document if authenticated and it's for the user themselves
      allow create:
        if enforceUserFields() &&
           isAuthenticated() &&
           userId == request.auth.uid;

      // Allow reading user documents by anyone
      allow read: if true;
    }
  }
}
