rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner
    function isOwner() {
      return resource.data.ownerId == request.auth.uid;
    }

    // Helper function to check if the user is a collaborator (shared access)
    function isSharedWithUser() {
      return request.auth.uid in resource.data.shares;
    }

    // Helper function to prevent updating ownerId unless it stays the same
    function isOwnerIdUnchanged() {
      return !('ownerId' in request.resource.data) || 
             request.resource.data.ownerId == resource.data.ownerId;
    }

    // Helper function to ensure only the owner can modify 'shares' field
    function canModifyShares() {
      return !('shares' in request.resource.data) || 
             resource.data.ownerId == request.auth.uid;
    }
    
    // Rules for "boards" collection
    match /boards/{boardId} {
      allow read: if isAuthenticated() && (isOwner() || isSharedWithUser());

      allow update:
        if isAuthenticated() && (isOwner() || isSharedWithUser())

      allow delete:
        if isAuthenticated() && isOwner();

      allow create:
        if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
    }

    match /users/{userId} {
      // Allow creating a user document if authenticated and it's for the user themselves
      allow create:
        if isAuthenticated() && userId == request.auth.uid;

      // Allow reading user documents by anyone
      allow read: if true;
    }
  }
}
